===================================
 Lepton EDA Relocatable Directories
===================================

:Author: Peter Brett
:Status: Implemented

..
  This document can be processed with docutils <http://docutils.sf.net>
  to generate HTML or LaTeX.  However, the markup is designed to be
  fully human-readable as-is.

.. contents::
..
    1  Introduction
    2  Backwards compatibility
    3  Directories API
      3.1  System data search path
      3.2  System configuration search path
      3.3  Per-user data path
      3.4  Per-user configuration path
    4  Related changes
      4.1  liblepton APIs
      4.2  Scheme APIs
      4.3  gschem
      4.4  gattrib
    5  References

Introduction
============

This document describes a new API and approach for liblepton for
locating Lepton's resource files, configuration files, and other
run-time resources.  In particular, the new API is designed to:

* facilitate relocatable builds (where a Lepton installation tree can be
  moved around the system without needing any further configuration)

* improve the experience for Windows users by reducing the number of
  environment variables that need to be correctly configured in order
  for Lepton to run

* better respect the *XDG Base Directory Specification* [XDGDIRS]_ on
  UNIX platforms.

The API takes advantage of relevant functions provided by [GLIB]_.

Backwards compatibility
=======================

There are some key considerations for backwards compatibility:

1) Lepton historically observes the `$GEDADATA` environment variable by
   using the directory it specifies as the *sole* source of system
   data.  Similarly, `$LEPTONRCDIR` specifies the directory for system
   configuration.

2) Lepton also historically *ensures* that `$GEDADATA` points to the
   directory into which Lepton was installed, and there are a lot users
   who depend on that being the case.

3) In the past the installation path (specified with the `--prefix`
   argument to `--configure` has been used as the sole location for
   system data in the absence of the `$GEDADATA`.  And similarly, the
   `--with-rcdir` option has been used to provide a compiled-in
   default for the system configuration directory.

4) The legacy location for user data and configuration is
   `$HOME/.gEDA` (or `$HOMEDRIVE$HOMEPATH/.gEDA` on Windows.

5) Finally, Lepton expects the default configuration files (such as
   `system-gafrc`) to be loaded from the installation *data*
   directory.

The scheme proposed in this specification provides backwards
compatibility with these behaviours.

Directories API
===============

System data search path
-----------------------

C function::

  const gchar * const * eda_get_system_data_dirs(void)

Scheme function::

  sys-data-dirs

The system data search path consists of multiple directories, all
searched in order.  The list is constructed as follows:

1. If the `$GEDADATA` environment variable is set and deprecated
   features are enabled, it is added to the list.  Otherwise, the
   "lepton-eda" subdirectory of each entry in
   `g_get_system_data_dirs()` is added to the list.

2. If neither relocatable builds are enabled nor the target platform
   is Windows, the value of the `LEPTONDATADIR` preprocessor macro
   (usually `${prefix}/share/lepton-eda`) is appended to the list.

3. Finally, if relocatable builds *are* enabled, guess the
   installation prefix, add the corresponding "share/lepton-eda"
   directory to it to, and append it to the list

For backwards compatibility, if the `$GEDADATA` environment variable
is not set, then it is set to the first directory in the search path
that contains a distinctive installed file (e.g. `scheme/geda.scm`).

System configuration search path
--------------------------------

C function::

  const gchar * const * eda_get_system_config_dirs(void)

Scheme function::

  sys-config-dirs

The system configuration search path also consists of multiple
directories to be searched in order.  The list is constructed as
follows:

1. If the `$GEDADATARC` environment variable is set and deprecated
   features are enabled, it is added to the list.  Otherwise, if
   `$GEDADATA` is set and deprecated features are enabled, *that*
   is added to the list.  Otherwise, the "lepton-eda" subdirectory
   of each entry in `g_get_system_config_dirs()` is added to the
   list.

2. If neither relocatable builds are enabled nor the target platform
   is Windows, the value of the `LEPTONRCDIR` preprocessor macro
   (usually `${prefix}/share/lepton-eda`) is appended to the list.

3. Finally, if relocatable builds *are* enabled, guess the
   installation prefix, add the corresponding "share/lepton-eda"
   directory to it to, and append it to the list.  This ensures
   that the default configuration files in the installation tree
   are in the configuration search path.

Per-user data path
------------------

C function::

  const gchar * eda_get_user_data_dir(void)

Scheme function::

  (user-data-dir)

Per-user data is read from a single directory.

1. If `$HOME/.gEDA` exists (or `$HOMEDRIVE/$HOMEPATH/.gEDA` on
   Windows), this directory is returned.

2. Otherwise, the `lepton-eda` subdirectory of
   `g_get_user_data_dir()` is returned.

Per-user configuration path
---------------------------

C function::

  const gchar * eda_get_user_config_dir(void)

Scheme function::

  (user-config-dir)

Per-user data is stored in a single directory.

1. If `$HOME/.gEDA` exists (or `$HOMEDRIVE/$HOMEPATH/.gEDA` on
   Windows), this directory is returned.

2. Otherwise, the `lepton-eda` subdirectory of
   `g_get_user_config_dir()` is returned.

Related changes
===============

liblepton APIs
--------------

* During liblepton initialisation, the `scheme` subdirectory of each of
  the `eda_get_system_data_paths()` should be added to the Guile load
  path.

* The `s_path_sys_config()`, `s_path_sys_data()` and
  `s_path_user_config()` functions should be removed.

* The `EdaConfig` API should use `eda_get_system_config_dirs()` and
  `eda_get_user_config_dir()` instead of its own path searching logic.

Scheme APIs
-----------

* `sys-data-dirs`, `sys-config-dirs`, `user-data-dir` and
  `user-config-dir` should be re-implemented to match the
  specification above.

gschem
------

* `gschem-gtkrc` file loading should load the first such file found in
  the system configuration path, before loading any `gschem-gtkrc`
  file in the per-user configuration path.

* There's no need to show a warning dialog if the system data search
  path is empty (since it should *never* be empty).  It should become
  an unrecoverable error.

* The `icons` subdirectory of each of the directories in the system
  configuration path should be added to the GTK+ icon theme search
  path.

* The colour map-switching actions in the gschem UI should search for
  the colour map in the system configuration directories.

gattrib
-------

* The `gattrib-menus.xml` file should be found by searching the system
  data search path.

References
==========

.. [GLIB]    The GNOME Project, "GLib Reference Manual".
             <http://library.gnome.org/devel/glib/stable/>

.. [XDGDIRS] W. Bastian, R. Lortie and L. Poettering, "XDG Base
             Directory Specification", Version 0.7.
             <http://www.freedesktop.org/wiki/Standards/basedir-spec>

..
   Local Variables:
   mode: rst
   End:
